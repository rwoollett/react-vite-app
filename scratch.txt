 

Idea for a production build of dashboard with docker and nginx.
Using a containerised web site on the main server for other apis in system.

eval $(minikube docker-env)

docker build -t netproc-dashboard:v1.0 -f Dockerfile.prod .

docker run -p 3000:80 netproc-dashboard:v1.0 


import React, { useState } from 'react';
import { useSignInMutation } from './apiSlice';

const SignInForm = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [signIn, { isLoading }] = useSignInMutation();
  const [errorMessage, setErrorMessage] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const result = await signIn({ email, password }).unwrap(); // Call the mutation
      console.log('Sign-in successful:', result);
      setErrorMessage(''); // Clear any previous error
    } catch (err) {
      if (err.status === 401) {
        setErrorMessage('Unauthorized: Invalid email or password.');
      } else {
        setErrorMessage('An unexpected error occurred. Please try again.');
      }
      console.error('Sign-in failed:', err);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label>Email:</label>
        <input
          type="email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
      </div>
      <div>
        <label>Password:</label>
        <input
          type="password"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
      </div>
      <button type="submit" disabled={isLoading}>
        {isLoading ? 'Signing in...' : 'Sign In'}
      </button>
      {errorMessage && <p style={{ color: 'red' }}>{errorMessage}</p>}
    </form>
  );
};

export default SignInForm;
